// SPDX-License-Identifier: MIT
// Copyright 2023 Edouard Gomez

#include "clutils.h"

#define CL_ERRORCODE_STR(r)                                                                                            \
    case CL_##r:                                                                                                       \
        return "CL_" #r

namespace clc
{

const char *cl_error_str(cl_int errorcode)
{
    switch (errorcode)
    {
        CL_ERRORCODE_STR(SUCCESS);
        CL_ERRORCODE_STR(DEVICE_NOT_FOUND);
        CL_ERRORCODE_STR(DEVICE_NOT_AVAILABLE);
        CL_ERRORCODE_STR(COMPILER_NOT_AVAILABLE);
        CL_ERRORCODE_STR(MEM_OBJECT_ALLOCATION_FAILURE);
        CL_ERRORCODE_STR(OUT_OF_RESOURCES);
        CL_ERRORCODE_STR(OUT_OF_HOST_MEMORY);
        CL_ERRORCODE_STR(PROFILING_INFO_NOT_AVAILABLE);
        CL_ERRORCODE_STR(MEM_COPY_OVERLAP);
        CL_ERRORCODE_STR(IMAGE_FORMAT_MISMATCH);
        CL_ERRORCODE_STR(IMAGE_FORMAT_NOT_SUPPORTED);
        CL_ERRORCODE_STR(BUILD_PROGRAM_FAILURE);
        CL_ERRORCODE_STR(MAP_FAILURE);
#ifdef CL_VERSION_1_1
        CL_ERRORCODE_STR(MISALIGNED_SUB_BUFFER_OFFSET);
        CL_ERRORCODE_STR(EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST);
#endif
#ifdef CL_VERSION_1_2
        CL_ERRORCODE_STR(COMPILE_PROGRAM_FAILURE);
        CL_ERRORCODE_STR(LINKER_NOT_AVAILABLE);
        CL_ERRORCODE_STR(LINK_PROGRAM_FAILURE);
        CL_ERRORCODE_STR(DEVICE_PARTITION_FAILED);
        CL_ERRORCODE_STR(KERNEL_ARG_INFO_NOT_AVAILABLE);
#endif
        CL_ERRORCODE_STR(INVALID_VALUE);
        CL_ERRORCODE_STR(INVALID_DEVICE_TYPE);
        CL_ERRORCODE_STR(INVALID_PLATFORM);
        CL_ERRORCODE_STR(INVALID_DEVICE);
        CL_ERRORCODE_STR(INVALID_CONTEXT);
        CL_ERRORCODE_STR(INVALID_QUEUE_PROPERTIES);
        CL_ERRORCODE_STR(INVALID_COMMAND_QUEUE);
        CL_ERRORCODE_STR(INVALID_HOST_PTR);
        CL_ERRORCODE_STR(INVALID_MEM_OBJECT);
        CL_ERRORCODE_STR(INVALID_IMAGE_FORMAT_DESCRIPTOR);
        CL_ERRORCODE_STR(INVALID_IMAGE_SIZE);
        CL_ERRORCODE_STR(INVALID_SAMPLER);
        CL_ERRORCODE_STR(INVALID_BINARY);
        CL_ERRORCODE_STR(INVALID_BUILD_OPTIONS);
        CL_ERRORCODE_STR(INVALID_PROGRAM);
        CL_ERRORCODE_STR(INVALID_PROGRAM_EXECUTABLE);
        CL_ERRORCODE_STR(INVALID_KERNEL_NAME);
        CL_ERRORCODE_STR(INVALID_KERNEL_DEFINITION);
        CL_ERRORCODE_STR(INVALID_KERNEL);
        CL_ERRORCODE_STR(INVALID_ARG_INDEX);
        CL_ERRORCODE_STR(INVALID_ARG_VALUE);
        CL_ERRORCODE_STR(INVALID_ARG_SIZE);
        CL_ERRORCODE_STR(INVALID_KERNEL_ARGS);
        CL_ERRORCODE_STR(INVALID_WORK_DIMENSION);
        CL_ERRORCODE_STR(INVALID_WORK_GROUP_SIZE);
        CL_ERRORCODE_STR(INVALID_WORK_ITEM_SIZE);
        CL_ERRORCODE_STR(INVALID_GLOBAL_OFFSET);
        CL_ERRORCODE_STR(INVALID_EVENT_WAIT_LIST);
        CL_ERRORCODE_STR(INVALID_EVENT);
        CL_ERRORCODE_STR(INVALID_OPERATION);
        CL_ERRORCODE_STR(INVALID_GL_OBJECT);
        CL_ERRORCODE_STR(INVALID_BUFFER_SIZE);
        CL_ERRORCODE_STR(INVALID_MIP_LEVEL);
        CL_ERRORCODE_STR(INVALID_GLOBAL_WORK_SIZE);
#ifdef CL_VERSION_1_1
        CL_ERRORCODE_STR(INVALID_PROPERTY);
#endif
#ifdef CL_VERSION_1_2
        CL_ERRORCODE_STR(INVALID_IMAGE_DESCRIPTOR);
        CL_ERRORCODE_STR(INVALID_COMPILER_OPTIONS);
        CL_ERRORCODE_STR(INVALID_LINKER_OPTIONS);
        CL_ERRORCODE_STR(INVALID_DEVICE_PARTITION_COUNT);
#endif
#ifdef CL_VERSION_2_0
        CL_ERRORCODE_STR(INVALID_PIPE_SIZE);
        CL_ERRORCODE_STR(INVALID_DEVICE_QUEUE);
#endif
#ifdef CL_VERSION_2_2
        CL_ERRORCODE_STR(INVALID_SPEC_ID);
        CL_ERRORCODE_STR(MAX_SIZE_RESTRICTION_EXCEEDED);
#endif
    }
    return "<unknown>";
}

} // namespace clc